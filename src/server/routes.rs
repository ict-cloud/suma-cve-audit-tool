use rust_embed::RustEmbed;
use warp::{ Filter, Reply, filters::BoxedFilter};
use crate::server::handlers::*;
use crate::server::api_handlers::*;

#[derive(RustEmbed)]
#[folder = "static"]
#[prefix = "static/"]
pub struct Asset;


pub fn stat_routes() -> BoxedFilter<(impl Reply,)> {

    let cors = warp::cors()
    .allow_any_origin()
    .allow_headers(vec!["User-Agent", "Sec-Fetch-Mode", "Referer", "Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", "Content-Type"])
    .allow_methods(vec!["POST", "GET"]);

    // build the pages and define an index
    let index_html = warp::get().and(warp::path::end()).and_then(serve_index).boxed();
    // serve all static assets
    let stat = warp::path("static").and(warp::path::tail()).and_then(serve).boxed();
    // urls needed from yew app
    let list_cves = warp::path!("cve-overview").and(warp::path::end()).and_then(serve_index).boxed();
    let errata_naff = warp::path!("not-affected").and(warp::path::end()).and_then(serve_index).boxed();
    let errata_aff = warp::path!("affected").and(warp::path::end()).and_then(serve_index).boxed();
    let errata_oth = warp::path!("other-errata").and(warp::path::end()).and_then(serve_index).boxed();


    // health
    let health_route = warp::path!("health").and_then(health_handler).boxed();

    index_html
    .or(stat)
    .or(health_route)
    .or(list_cves)
    .or(errata_naff)
    .or(errata_aff)
    .or(errata_oth)
    .with(cors)
    .boxed()
}

pub fn api_routes() -> BoxedFilter<(impl Reply,)> {

    let cors = warp::cors()
    .allow_any_origin()
    .allow_headers(vec!["User-Agent", "Sec-Fetch-Mode", "Referer", "Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", "Content-Type"])
    .allow_methods(vec!["POST", "GET"]);

    // build the pages and define an index
    let list_errata = warp::path!("api" / "geterrata").and(warp::path::end()).and(warp::any().map(move || "".to_owned())).and_then(erratalisthandler).with(&cors).boxed();
    let list_secadv = warp::path!("api" / "getsecadvice"/ String).and(warp::path::end()).and_then(erratalisthandler).with(&cors).boxed();
    let updator = warp::path!("api" / "updator").and(warp::path::end()).and_then(updator_handler).with(&cors).boxed();


    list_errata
    .or(list_secadv)
    .or(updator)
    .with(cors)
    .boxed()
}