use config::{Config, Environment, File};
use serde_derive::{Deserialize};
use std::{env, path::PathBuf, collections::HashMap};

#[derive(Deserialize, Clone, Hash)]
pub struct Database {
    pub folder: String,
}

#[derive(Deserialize, Clone, Hash)]
pub struct Suma {
    pub url: String,
    pub user: String,
    pub password: String,
}

#[derive(Deserialize, Clone, Hash)]
pub struct Server {
    pub listen: String,
}

#[derive(Deserialize, Clone, Hash)]
pub struct Settings {
    pub database: Database,
    pub suma: Suma,
    pub frontend: Server,
    pub backend: Server,
}


impl Settings {
    pub fn load() -> Self {        
        let default_cfg: PathBuf = ["config", "config.toml"].iter().collect();
        let cfg_file = env::var("CFG_FILE").unwrap_or_else(|_| default_cfg.into_os_string().into_string().unwrap());
        let s = Config::builder()
            .add_source(File::with_name(&cfg_file))
            .add_source(Environment::with_prefix("APP").separator("_"))
            .build().unwrap();

        let settings: HashMap<String, Settings> = s.try_deserialize().unwrap();

        let cfg_env = env::var("CFG_ENV").unwrap_or_else(|_| "default".into());

        settings.get(cfg_env.as_str()).expect("No settings for environment").clone()
    }
}