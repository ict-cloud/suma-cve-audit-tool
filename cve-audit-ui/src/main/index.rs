use yew::prelude::*;
use yew::{ContextProvider, function_component};
use yew_router::prelude::*;
use crate::route;
use crate::main::updator;

// needs refactoring, see
// https://discord.com/channels/701068342760570933/703449306497024049/925836725006245888
// the current implementation does not always reload.
// page needs to be refactored modular and one main component to just react on any change of the route
// all other components will reuse the other components

#[function_component(CveAuditTool)]
pub fn cve_audit_tool() -> Html {
    html! {
        <BrowserRouter>
        { render_header() }
        <div class="container-fluid">
          <div class="row">
            <CveSideNav/>
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                {render_headlinks() }
                <Switch<route::AppRoute> render={Switch::render(route::switch) } />
            </main>
          </div>
        </div>
        </BrowserRouter>
    }
}

fn render_header() -> Html {
    html! {
        <header class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow">
        <a class="navbar-brand col-md-3 col-lg-2 me-0 px-3" href="/">{"SUSE CVE Audit Tool"}</a>
        <button class="navbar-toggler position-absolute d-md-none collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#sidebarMenu" aria-controls="sidebarMenu" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        </header>
    }
}

fn render_headlinks() -> Html {

    // use reducer for the update data button

    html! {
        <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
            <h1 class="h2">{"Dashboard"}</h1>
            <div class="btn-toolbar mb-2 mb-md-0">
            <updator::UseReducer/>
            <div class="btn-group me-2">
                <button type="button" class="btn btn-sm btn-outline-secondary">{"Share"}</button>
                <button type="button" class="btn btn-sm btn-outline-secondary">{"Export"}</button>
            </div>
            <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle">
                <span data-feather="calendar"></span>
                {"This week"}
            </button>
            </div>
        </div>
    }
}

#[function_component(CveSideNav)]
pub fn cve_side_nav() -> Html {
    html!{
        <nav id="sidebarMenu" class="col-md-3 col-lg-2 d-md-block bg-light sidebar collapse">
            <div class="position-sticky pt-3">
                <ul class="nav flex-column">
                <li class="nav-item">
                    //<Link <route::AppRoute> to={route::AppRoute::Home} classes={classes!("nav-link", "link-dark")}>{ "Affected CVEs" }</Link<route::AppRoute>>
                    {render_navlink(route::AppRoute::Home, "Affected CVEs")}
                </li>
                <li class="nav-item">
                    //<Link <route::AppRoute> to={route::AppRoute::NotAffected} classes={classes!("nav-link", "link-dark")}>{ "Not affected CVEs" }</Link<route::AppRoute>>
                    {render_navlink(route::AppRoute::NotAffected, "Not affected CVEs")}
                </li>
                <li class="nav-item">
                    //<Link <route::AppRoute> to={route::AppRoute::OtherErrata} classes={classes!("nav-link", "link-dark")}>{ "Other Errata" }</Link<route::AppRoute>>
                    {render_navlink(route::AppRoute::OtherErrata, "Other Errata")}
                </li>
                </ul>
            </div>
        </nav>
    }
}

fn render_navlink(i_to: route::AppRoute, i_title: &str) -> Html {
    
    let current_route = use_route::<route::AppRoute>();
    let activ = 
     if current_route.unwrap_or_default() == i_to {
         "active"
     } else {
         ""
     };

    html!{
        <Link <route::AppRoute> to={i_to} classes={classes!("nav-link", "link-dark", activ)}>{ i_title }</Link<route::AppRoute>>
    }
}