use crate::persistence::rdbms;
use crate::persistence::rdbms_audit::{errata_get_audit_trail, write_audit_data, get_audit_for_errata};
use crate::persistence::rdbms_errata::{list_errata_with_audit};
use crate::suma::sumaclient;
use warp::reply::json;

pub async fn erratalisthandler(i_kind: String) -> Result<impl warp::Reply, warp::Rejection> {
    match i_kind.as_str() {
        "affected" => Ok(json(
            &rdbms::get_secadvisories(rdbms::SecAdvisoryKind::Affected).await,
        )),
        "unrated" => Ok(json(
            &rdbms::get_secadvisories(rdbms::SecAdvisoryKind::AffectedUnrated).await,
        )),
        "unaffected" => Ok(json(
            &rdbms::get_secadvisories(rdbms::SecAdvisoryKind::Unaffected).await,
        )),
        _ => Ok(json(&rdbms::get_errataext().await)),
    }
}

pub async fn errata_details_handler(i_id: u32) -> Result<impl warp::Reply, warp::Rejection> {
    Ok(json(&rdbms::get_errata(i_id).await))
}

pub async fn updator_handler() -> Result<impl::warp::Reply, warp::Rejection> {
    sumaclient::execute();
    Ok("All loaded")
}

pub async fn audit_form_handler(
    formdata: cve_audit_types::ErrataAuditData,
) -> Result<impl ::warp::Reply, warp::Rejection> {
        //pub async fn audit_form_handler(formdata: Vec<(String, String)>) -> Result<impl::warp::Reply, warp::Rejection> {
    _ = write_audit_data(formdata.clone()).await;
    //Ok(warp::redirect::see_other(Uri::from_static("/")))
    Ok(json(
        &errata_get_audit_trail(formdata.errata_id).await,
    ))
}

pub async fn audit_trail_handler(i_id: u32) -> Result<impl warp::Reply, warp::Rejection> {
    Ok(json(&errata_get_audit_trail(i_id).await))
}

pub async fn errata_audit_handler(i_id: u32) -> Result<impl warp::Reply, warp::Rejection> {
    Ok(json(&get_audit_for_errata(i_id).await))
}

pub async fn errata_with_audit_list() -> Result<impl warp::Reply, warp::Rejection> {
    Ok(json(&list_errata_with_audit().await))
}
