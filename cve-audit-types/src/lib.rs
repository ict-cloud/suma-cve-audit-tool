use serde_derive::{Deserialize, Serialize};
use std::str::FromStr;
use std::convert::Infallible;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Errata {
    pub id: u32, 
    pub date: String,
    pub update_date: String,
    pub advisory_synopsis: String,
    pub advisory_type: String,
    pub advisory_name: String,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ErrataExtended {
    pub id: u32, 
    pub date: String,
    pub update_date: String,
    pub advisory_synopsis: String,
    pub advisory_type: String,
    pub advisory_name: String,
    pub cves: Vec<String>,
    pub sys_affected: bool,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CVE {
    pub cve_id: String,
    pub suse_errata_list: Vec<Errata> 
}

// Method implementation
impl CVE {

    pub fn add_errata(&mut self, e: &Errata) {
        self.suse_errata_list.push(e.to_owned());
    }
}

impl From<Errata> for ErrataExtended {
    fn from(errata: Errata) -> Self {
        ErrataExtended{
            id: errata.id,
            date: errata.date,
            update_date: errata.update_date,
            advisory_synopsis: errata.advisory_synopsis,
            advisory_type: errata.advisory_type,
            advisory_name: errata.advisory_name,
            cves: Vec::new(),
            sys_affected: false,
        }
    }
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum AuditStatus {
    New,
    InProgress,
    Done,
}

impl FromStr for AuditStatus {
    type Err = Infallible;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let audit_status = match s {
            "In Progress" => AuditStatus::InProgress,
            "Done" => AuditStatus::Done,
            &_ => AuditStatus::New,
        };

        Ok(audit_status)
    }
}

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum AuditAssessment{
    NotAffected,
    AffectedRegularPatching,
    AffectedImmediatePatching,
    AffectedPatched,
    Unclear,
}

impl FromStr for AuditAssessment {
    type Err = Infallible;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let audit_assessment = match s {
            "Not affected" => AuditAssessment::NotAffected,
            "Regular Patching" => AuditAssessment::AffectedRegularPatching,
            "Immediate Patching" => AuditAssessment::AffectedImmediatePatching,
            "Patched" => AuditAssessment::AffectedPatched,
            &_ => AuditAssessment::Unclear
        };

        Ok(audit_assessment)
    }
}

// Audit structures
#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub struct ErrataAuditData {
    pub id: u32,
    pub errata_id: u32,
    pub audit_date: String,
    pub auditor: String,
    pub resp: String,
    pub status: AuditStatus,
    pub assessment_verdict: AuditAssessment,
    pub assessed_score: f32,
    pub assessment_comment: String
}