use rust_embed::RustEmbed;
use warp::{ Filter, Reply, filters::BoxedFilter};
use crate::server::handlers::*;
//use std::convert::Infallible;

#[derive(RustEmbed)]
#[folder = "static"]
#[prefix = "static/"]
pub struct Asset;


// filter helper
// fn with_db() -> impl warp::Filter<Extract = (sled::Db,), Error = Infallible> + Clone {
//     warp::any().map(move || None)
// }

pub fn routes() -> BoxedFilter<(impl Reply,)> {

    let cors = warp::cors()
    .allow_any_origin()
    .allow_headers(vec!["User-Agent", "Sec-Fetch-Mode", "Referer", "Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", "Content-Type"])
    .allow_methods(vec!["POST", "GET"]);

    // build the pages and define an index
    //let index_html = warp::get().and(warp::path::end()).and_then(handlers::serve_index);
    let index_html = warp::get().and(warp::path::end()).and_then(serve_index).boxed();
    // serve all static assets
    let stat = warp::path("static").and(warp::path::tail()).and_then(serve).boxed();
    // urls needed from yew app
    // let yew_vs = warp::get().and(warp::path("vs").and(warp::path::end())).and_then(handlers::serve_index).boxed();
    // let yew_be = warp::get().and(warp::path("be").and(warp::path::end())).and_then(handlers::serve_index).boxed();
    // let yew_jobs = warp::get().and(warp::path("jobs").and(warp::path::peek())).and_then(handlers::serve_idx).boxed();
    // // health endpoint
    // let health_route = warp::path!("health").and_then(handlers::health_handler).boxed();
    // // list jobs
    // let api_listjobs = warp::path!("api" / "getjobs" / String).and(warp::path::end()).and(handlers::with_db()).and_then(handlers::list_handler).with(&cors).boxed();
    // // list job
    // let api_listjob = warp::path!("api" / "getjob" / String).and(warp::path::end()).and(with_db()).and_then(handlers::job_handler).with(&cors).boxed();
    // // create job
    // let api_createjob = warp::path!("api" / "create-job")
    //                     .and(warp::body::json())
    //                     .and(with_db())
    //                     .and_then(handlers::create_handler)
    //                     .with(cors).boxed();

    index_html.
    or(stat)
    // .or(yew_vs)
    // .or(yew_be)
    // .or(yew_jobs)
    // .or(api_listjobs)
    // .or(api_listjob)
    // .or(api_createjob)
    // .or(health_route)
    .with(cors)
    .boxed()
}