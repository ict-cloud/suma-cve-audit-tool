use reqwasm::*;
use yew::prelude::*;
use yew_router::prelude::*;
use wasm_bindgen_futures::*;

#[function_component(CVEslist)]
pub fn cveslist() -> Html {
    let cves = use_state(|| vec![]);
    {
        let cves = cves.clone();
        use_effect_with_deps(move |_| {
            let cves = cves.clone();
            wasm_bindgen_futures::spawn_local(async move {
                let fetched_cves: Vec<cve_audit_types::CVE> = reqwasm::http::Request::get("http://localhost:8081/api/getcves")
                    .send()
                    .await
                    .unwrap()
                    .json()
                    .await
                    .unwrap();
                cves.set(fetched_cves);
            });
            || ()
        }, ());
    }

    html! {
        <div>
            { render_list(cves)}
        </div>
    }

}

fn render_list(cves: yew::UseStateHandle<Vec<cve_audit_types::CVE>>) -> Html {
    let list = &*cves.clone();
    if list.len() > 0 {
        html! {
            <div class={classes!("list")}>
                { list.iter().map(|j| view_cve(j)).collect::<Html>() }
            </div>
        }
    } else {
        html! {
            <div class={classes!("loading")}>{"loading..."}</div>
        }
    }
}

fn view_cve(cve: &cve_audit_types::CVE) -> Html {
    let cves = cve.suse_errata_list.to_owned();
    html! {
        <>
        <div class={classes!("list-item")}>
            <div><strong>{ &cve.cve_id }</strong></div>
            <ul class="cves">
                { cves.iter().map(|errata| view_errata(errata)).collect::<Html>() }
            </ul>
        </div>
        </>
    }
}

fn view_errata(errata: &cve_audit_types::Errata) -> Html {
    html! {
        <li>
        {errata.advisory_name.to_owned()}
        </li>
    }
}