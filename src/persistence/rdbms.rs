use rusqlite::{Connection, Result, params, RowIndex};
use hifitime::prelude::*;
//use sqlx::Connection;
use cve_audit_types::*;
use log::{info, warn, error};
use std::path::Path;


// Constants
//const DB_NAME: &str = "./db/suse_errata_orig.sqlite";
const DB_NAME: &str = "suse_errata.sqlite";
//const DB_NAME: &str = "C:/temp/suma/suse_errata.sqlite";

// ENUM
#[derive(Debug, PartialEq)]
pub enum SecAdvisoryKind{
    Affected,
    Unaffected,
}

/*  SETUP of Relational database
* suse_errata
*    data from suse errata
* 
*  CVE
*    data for CVE (id, name, score)
*
*  Audit Evaluation
*    Data of the evaluation
*    date, person, result, 
*
*  errata_cve
*    Relations from errata to cve
*  
*  errata_audit
*    Relations from errata to audits
*
*  cve_systems
*    systems affected by cve
*/ 
fn open_db() -> Connection {

    let dir = std::env::current_exe().unwrap().parent().expect("Executable must be in some directory").to_owned();
    let mut path = dir.join("db");
    path.push(DB_NAME);

    Connection::open(path.to_str().unwrap()).unwrap()
}

// current path
fn db_path() -> String {
    let dir = std::env::current_exe().unwrap().parent().expect("Executable must be in some directory").to_owned();
    let path = dir.join("db");

    // return path string
    path.to_str().unwrap().to_owned()
}

pub fn setup() -> Result<()> {
    // create db path if it not exists
    if !std::path::Path::new(db_path().as_str()).exists() {
        match std::fs::create_dir(db_path().as_str()) {
            Err(e) => log::error!("Unable to create directory: {}", e),
            Ok(()) => log::info!("Directory created"),
        };
    }

    let conn = open_db();

    let setup_stmt = r#"
        begin;
            CREATE TABLE IF NOT EXISTS errata (
                suse_id INTEGER UNIQUE,
                date REAL NOT NULL,
                update_date REAL NOT NULL,
                advisory_type TEXT,
                advisory_name TEXT NOT NULL UNIQUE,
                advisory_synopsis TEXT
            );
            CREATE TABLE IF NOT EXISTS cve (
                id TEXT PRIMARY KEY,
                score REAL
            );
            CREATE TABLE IF NOT EXISTS errata_cve (
                id INTEGER PRIMARY KEY,
                cve_id TEXT NOT NULL REFERENCES cve(id),
                errata_id INTEGER NOT NULL REFERENCES ERRATA(suse_id)
            );
            CREATE TABLE IF NOT EXISTS cve_systems (
                id INTEGER PRIMARY KEY,
                cve_id TEXT NOT NULL REFERENCES cve(id),
                affected_systems_cnt INTEGER,
                last_checked_date REAL
            );
        COMMIT;
    "#;
    
    match conn.execute_batch(setup_stmt) {
         Ok(())   => log::info!("Tables setup"),
         Err(err) => log::error!("setup failed: {}", err),
    };

    Ok(())
}

pub fn store_errata(i_errata: &cve_audit_types::Errata) -> Result<()> {
    let conn = open_db();
    let stmt = r#"INSERT INTO errata VALUES (?1, julianday(?2), julianday(?3), ?4, ?5, ?6) ON CONFLICT DO NOTHING"#;

    match conn.execute(&stmt, 
            params![i_errata.id, 
                    i_errata.date, 
                    i_errata.update_date, 
                    i_errata.advisory_type, 
                    i_errata.advisory_name, 
                    i_errata.advisory_synopsis],
            )
    {
        Ok(inserted) => log::info!("Rows inserted {}", inserted),
        Err(err)     => log::error!("insert failed: {}", err),
    };

    Ok(())
}

pub fn store_cve(i_errata_ext: &cve_audit_types::ErrataExtended) -> Result<()> {
    let conn = open_db();
    let stmt = r#"INSERT INTO cve (id) VALUES (?) ON CONFLICT (id) DO NOTHING"#;
    let stmt_rel = r#"INSERT INTO errata_cve (cve_id, errata_id) VALUES (?1, ?2) ON CONFLICT DO NOTHING"#;

    for c in i_errata_ext.cves.iter() {

        match conn.execute(stmt, params![c]) {
            Ok(inserted) => log::info!("store_cve.cve: rows inserted {}", inserted),
            Err(err)     => log::error!("store_cve insert failed: {}", err),
        };
        
        match conn.execute(stmt_rel, params![c, i_errata_ext.id]) {
            Ok(inserted) => log::info!("store_cve.errata_cve: rows inserted {}", inserted),
            Err(err)     => log::error!("errata_cve insert failed: {}", err),
        };
    }

    Ok(())
}

pub fn store_cve_affsystem(i_cve: &str, i_num_asys: i32) -> Result<()> {

    let conn = open_db();
    let stmt_cve = r#"INSERT INTO cve (id) VALUES (?) ON CONFLICT (id) DO NOTHING"#;
    let stmt = r#"INSERT INTO cve_systems (cve_id, affected_systems_cnt, last_checked_date) VALUES (?1, ?2, julianday('now'));"#;

    match conn.execute(stmt_cve, params![i_cve]) {
        Ok(inserted) => log::info!("store_cve_affsystem: rows inserted {}", inserted),
        Err(err)     => log::error!("store_cve_affsystem insert failed: {}", err),
    }; 

    match conn.execute(stmt, params![i_cve, i_num_asys]) {
        Ok(inserted) => log::info!("store_cve_affsystem: rows inserted {}", inserted),
        Err(err)     => log::error!("store_cve_affsystem insert failed: {}", err),
    }; 

    Ok(())
}

fn convert_jd(i_jd: f64) -> String {
    let epoch = hifitime::Epoch::from_jde_tdb(i_jd).as_gregorian_utc_str();
    let (d, _) = epoch.split_once("T").unwrap();
    d.to_string()
}

pub fn get_errataext() -> Vec<cve_audit_types::ErrataExtended> {
    let mut ere: Vec<cve_audit_types::ErrataExtended> = Vec::new();

    let sel = r#"
      select * from errata order by update_date desc
    "#;

    let db = open_db();

    let mut stmt = db.prepare(sel).unwrap();
    let mut rows = stmt.query([]).unwrap();
    while let Some(row) = rows.next().unwrap() {
        let id = row.get(0).unwrap();
        let erta = cve_audit_types::ErrataExtended{
            id: id,
            date: convert_jd(row.get::<_, f64>(1).unwrap()),
            update_date: convert_jd(row.get::<_, f64>(2).unwrap()),
            advisory_synopsis: row.get(5).unwrap(),
            advisory_type: row.get(3).unwrap(),
            advisory_name: row.get(4).unwrap(),
            cves: get_linked_cves(&id),
            sys_affected: get_affected_sys(&id),
        };
        ere.push(erta);
    }
    ere
}

fn get_linked_cves(i_errata_id: &i32) -> Vec<String> {
    let mut lcves: Vec<String> = Vec::new();

    let sel = r#"
    select id from cve where id in (select cve_id from errata_cve where errata_id = ?); 
    "#;

    let db = open_db();
    let mut stmt = db.prepare(sel).unwrap();
    let res = stmt.query_map([i_errata_id], |row| row.get(0)).unwrap();

    for cve in res {
        lcves.push(cve.unwrap());
    }

    drop(stmt);
    drop(db);

    lcves
}

fn get_affected_sys(i_errata_id: &i32) -> bool {

    let sel = r#"
    select sum(affected_systems_cnt)
    from  cve_systems as cs
    where cs.cve_id in (select cve_id from errata_cve where errata_id = ?);
    "#;

    let db = open_db();
    let cnt: i32 = db.query_row(sel, params![i_errata_id], |row| row.get(0)).unwrap_or(0);

    cnt > 0
}

pub fn get_secadvisories(i_kind: SecAdvisoryKind) -> Vec<cve_audit_types::ErrataExtended> {
    let mut sa: Vec<cve_audit_types::ErrataExtended> = Vec::new();

    let stmt_aff = r#"
    select * 
    from errata 
    where advisory_type = "Security Advisory" 
    and suse_id in (
        select distinct errata_id 
        from errata_cve 
        where exists (select null 
                  from cve_systems 
                  where cve_systems.cve_id = errata_cve.cve_id 
                  and affected_systems_cnt > 0
        ))
    order by update_date desc;
    "#;

    let stmt_naff = r#"
    select * 
    from errata 
    where advisory_type = "Security Advisory" 
    and suse_id in (
        select distinct errata_id 
        from errata_cve 
        where exists (select null 
                  from cve_systems 
                  where cve_systems.cve_id = errata_cve.cve_id 
                  and affected_systems_cnt = 0
        ) and not exists (
            select null 
            from cve_systems 
            where cve_systems.cve_id = errata_cve.cve_id 
            and affected_systems_cnt > 0
        ))
    order by update_date desc;
    "#;

    let db = open_db();

    let mut stmt = match i_kind {
        SecAdvisoryKind::Affected   => { db.prepare(stmt_aff).unwrap() },
        SecAdvisoryKind::Unaffected => { db.prepare(stmt_naff).unwrap() },
    };
    let mut rows = stmt.query([]).unwrap();
    while let Some(row) = rows.next().unwrap() {
        let id = row.get(0).unwrap();
        let erta = cve_audit_types::ErrataExtended{
            id: id,
            date: convert_jd(row.get::<_, f64>(1).unwrap()),
            update_date: convert_jd(row.get::<_, f64>(2).unwrap()),
            advisory_synopsis: row.get(5).unwrap(),
            advisory_type: row.get(3).unwrap(),
            advisory_name: row.get(4).unwrap(),
            cves: get_linked_cves(&id),
            sys_affected: get_affected_sys(&id),
        };
        sa.push(erta);
    }

    sa
}

pub fn get_errata(i_id: i32) -> cve_audit_types::ErrataExtended {
    let mut ere: Vec<cve_audit_types::ErrataExtended> = Vec::new();

    let sel = r#"
      select * from errata where suse_id = ? order by update_date desc
    "#;

    let db = open_db();

    let mut stmt = db.prepare(sel).unwrap();
    let mut rows = stmt.query([i_id]).unwrap();
    // duplicate code!
    while let Some(row) = rows.next().unwrap() {
        //let id = row.get(0).unwrap();
        let erta = cve_audit_types::ErrataExtended{
            id: row.get(0).unwrap(),
            date: convert_jd(row.get::<_, f64>(1).unwrap()),
            update_date: convert_jd(row.get::<_, f64>(2).unwrap()),
            advisory_synopsis: row.get(5).unwrap(),
            advisory_type: row.get(3).unwrap(),
            advisory_name: row.get(4).unwrap(),
            cves: get_linked_cves(&i_id),
            sys_affected: get_affected_sys(&i_id),
        };
        ere.push(erta);
    }
    let ee = &ere[0];
    ee.clone()
}