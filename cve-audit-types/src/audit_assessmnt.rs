use serde_derive::{Deserialize, Serialize};
use std::convert::Infallible;
use std::fmt;
use std::str::FromStr;

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum AuditAssessment {
    NotAffected,
    AffectedRegularPatching,
    AffectedImmediatePatching,
    AffectedPatched,
    Unclear,
}

impl fmt::Display for AuditAssessment {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            AuditAssessment::NotAffected => write!(f, "Not affected"),
            AuditAssessment::AffectedRegularPatching => write!(f, "Regular patching"),
            AuditAssessment::AffectedImmediatePatching => write!(f, "Immediate patching"),
            AuditAssessment::AffectedPatched => write!(f, "Patched"),
            _ => write!(f, "Unclear"),
        }
    }
}

// FromStr to be able to catch input Strings from forms
impl FromStr for AuditAssessment {
    type Err = Infallible;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let audit_assessment = match s {
            "Not affected" => AuditAssessment::NotAffected,
            "Regular Patching" => AuditAssessment::AffectedRegularPatching,
            "Immediate Patching" => AuditAssessment::AffectedImmediatePatching,
            "Patched" => AuditAssessment::AffectedPatched,
            &_ => AuditAssessment::Unclear,
        };

        Ok(audit_assessment)
    }
}
