use crate::route;
use reqwasm::*;
use wasm_bindgen_futures::*;
use yew::prelude::*;
use yew_router::prelude::*;

#[function_component(CVEslist)]
pub fn cveslist() -> Html {
    let cves = use_state(|| vec![]);
    {
        let cves = cves.clone();
        use_effect_with_deps(
            move |_| {
                let cves = cves.clone();
                wasm_bindgen_futures::spawn_local(async move {
                    let fetched_cves: Vec<cve_audit_types::CVE> =
                        reqwasm::http::Request::get("http://localhost:8081/api/getcves")
                            .send()
                            .await
                            .unwrap()
                            .json()
                            .await
                            .unwrap();
                    cves.set(fetched_cves);
                });
                || ()
            },
            (),
        );
    }

    html! {
        <div>
            { render_list(cves)}
        </div>
    }
}

fn render_list(cves: yew::UseStateHandle<Vec<cve_audit_types::CVE>>) -> Html {
    let list = &*cves.clone();
    if list.len() > 0 {
        html! {
            <div class={classes!("list", "table-responsive")}>
              <table class={classes!("table", "table-striped", "table-sm")}>
                <thead>
                <tr>
                  <th scope={"col"}>{"CVE"}</th>
                  <th scope={"col"}>{"SUSE Errata"}</th>
                  <th scope={"col"}>{"Details"}</th>
                </tr>
                </thead>
                <tbody>
                  { list.iter().map(|c| view_cve(c)).collect::<Html>() }
                </tbody>
              </table>
            </div>
        }
    } else {
        html! {
            <div class={classes!("loading")}>{"loading..."}</div>
        }
    }
}

fn view_cve(cve: &cve_audit_types::CVE) -> Html {
    let cves = cve.suse_errata_list.to_owned();
    html! {
        <tr>
          <td>{cve.cve_id.to_owned()}</td>
          <td><ul>{ cves.iter().map(|errata| view_errata(errata)).collect::<Html>() }</ul></td>
          <td><Link<route::AppRoute> to={route::AppRoute::Cve { i_cve: cve.cve_id.to_owned() }}> {"Details"} </Link<route::AppRoute>></td>
        </tr>
    }
}

fn view_errata(errata: &cve_audit_types::Errata) -> Html {
    html! {
      <li>{format!{"{} - {}", errata.id.to_owned(), errata.advisory_name.to_owned()}}</li>
    }
}
