use yew::prelude::*;

#[derive(Properties, PartialEq)]
pub struct AuditTrailProps {
    pub audit_trail_list: Vec<cve_audit_types::ErrataAuditData>,
}

#[function_component(AuditTrailList)]
pub fn audit_trail_list(audit_trail_props: &AuditTrailProps) -> Html {
    html!{
        <div>
            <h2>{"List"}</h2>
            {render_list(audit_trail_props.audit_trail_list.clone())}
        </div>
    }
}

fn render_list(audit_trail: Vec<cve_audit_types::ErrataAuditData>) -> Html {
    html! {
        <div class={classes!("list", "table-responsive")}>
          <table class={classes!("table", "table-striped", "table-sm")}>
            <thead>
              <tr>
                <th scope={"col"}>{"Date"}</th>
                <th scope={"col"}>{"Status"}</th>
                <th scope={"col"}>{"Assessment"}</th>
                <th scope={"col"}>{"Assessed Score"}</th> 
                <th scope={"col"}>{"Auditor"}</th>
                <th scope={"col"}>{"Responsible"}</th>
              </tr>
            </thead>
            <tbody>
            { audit_trail.iter().map(|c| render_line(c)).collect::<Html>() }
            </tbody>
          </table>
        </div>
    }
}

fn render_line(line_item: &cve_audit_types::ErrataAuditData) -> Html {
    html! {
        <tr>
          <td>{&line_item.audit_date}</td>
          <td>{&line_item.status}</td>
          <td>{&line_item.assessment_verdict}</td>
          <td>{&line_item.assessed_score}</td>
          <td>{&line_item.auditor}</td>
          <td>{&line_item.resp}</td>
        </tr>
    }
}