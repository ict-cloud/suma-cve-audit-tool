use crate::details::detail::*;
use crate::list::{cves::*, errata::*};
use crate::reports::errata_audit::*;
use yew::prelude::{html, Html};
use yew_router::prelude::Routable;

#[derive(Routable, PartialEq, Clone, Debug)]
pub enum AppRoute {
    #[at("/")]
    Home,
    #[at("/unrated")]
    AffectedUnrated,
    #[at("/not-affected")]
    NotAffected,
    #[at("/other-errata")]
    OtherErrata,
    #[at("/cves/:i_cve")]
    Cve { i_cve: String },
    #[at("/errata/:i_errata_id")]
    Errata { i_errata_id: u32 },
    #[at("/cve-overview")]
    CveOverview,
    #[at("/report/errataudit")]
    ErrataAuditReport,
    #[not_found]
    #[at("/404")]
    NotFound,
}

pub fn switch(routes: &AppRoute) -> Html {
    match routes.clone() {
        AppRoute::Home => {
            html! {
                <Erratalist url={"http://localhost:8081/api/getsecadvice/affected".to_owned()} />
            }
        }
        AppRoute::AffectedUnrated => {
            html! {
                <Erratalist url={"http://localhost:8081/api/getsecadvice/unrated".to_owned()} />
            }
        }
        AppRoute::NotAffected => {
            html! {
                <Erratalist url={"http://localhost:8081/api/getsecadvice/unaffected".to_owned()} />
            }
        }
        AppRoute::OtherErrata => {
            html! {
                <Erratalist url={"http://localhost:8081/api/geterrata".to_owned()} />
            }
        }
        AppRoute::CveOverview => {
            html! { <CVEslist/> }
        }
        AppRoute::Cve { i_cve: _ } => {
            html! { <CveDetails /> }
        }
        AppRoute::Errata { i_errata_id } => {
            html! { <ErrataDetails id={i_errata_id} /> }
        }
        AppRoute::ErrataAuditReport => {
            html! { <ErrataAuditReport/> }
        }
        AppRoute::NotFound => {
            html! { <div>{"Invalid Page"}</div> }
        }
    }
}
