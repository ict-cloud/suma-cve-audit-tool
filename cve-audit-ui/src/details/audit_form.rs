use yew_router::history::History;
use web_sys::*;
use yew::prelude::*;
use yew_router::prelude::*;
use cve_audit_types::*;
use wasm_bindgen_futures::spawn_local;
use std::str::FromStr;

#[derive(Properties, PartialEq, Clone)]
pub struct AuditFormProps {
    pub errata_id: u32,
}

// see https://discord.com/channels/701068342760570933/703449306497024049/926381991983743037
#[function_component(AuditForm)]
pub fn audit_form(audit_form_props: &AuditFormProps) -> Html {
  let history = use_history().unwrap();
  let errata_id = audit_form_props.errata_id.clone();
  // Form submit event
  let onsubmit = {
    Callback::from(move |e: FocusEvent| {
      e.prevent_default(); // dont do browser auto post
      let form: HtmlFormElement = e.target_unchecked_into();
      let form_data = FormData::new_with_form(&form).expect("Valid form data");
      let local_history = history.clone(); // history needs to be cloned from function component
      // validation of form data?
      // if is_invalid {
      //     return;
      // }
      let body = ErrataAuditData {
        id: 0, //form_data.get("id").into_serde::<u32>().expect("Valid unsigned integer"),
        errata_id: errata_id.clone(), // the id of the errata
        audit_date: String::from(""),
        auditor: form_data.get("auditor").as_string().expect("auditor fiel expected string").to_owned(),
        resp: form_data.get("resp").as_string().expect("resp field expected string").to_owned(),
        status: AuditStatus::from_str(&form_data.get("status").as_string().expect("status field expected string")).unwrap(),
        assessment_verdict: AuditAssessment::from_str(&form_data.get("assessment_verd").as_string().expect("assessment_verd field expected string")).unwrap(),
        assessed_score: form_data.get("assess_score").as_string().unwrap_or_default().parse::<f32>().unwrap_or_default(), // string needs to be parsed, other methods are unsafe
        assessment_comment: form_data.get("assess_comment").as_string().expect("assess_comment expected string").to_owned(),
      };

      // fetching is asynchronous so we spawn a wasm_bindgen thread https://yew.rs/docs/tutorial#fetching-data-using-external-rest-api
      spawn_local(async move {
        // here you should do the fetch, with something like reqwasm or just fetch from web_sys
        let _resp = reqwasm::http::Request::post("/api/audit/submit")
          .header("Content-Type", "application/json")
          .body(serde_json::to_string(&body).unwrap())
          .send()
          .await
          .unwrap();
        // do stuff with the response
      });
      // all good push the original route to reload page
      //local_history.push(crate::route::AppRoute::Errata { i_errata_id: errata_id })
      local_history.replace(crate::route::AppRoute::Errata { i_errata_id: errata_id })
    })
  };

  html!{
    <div class="col-md-7 col-lg-8">
      <form method="post" {onsubmit} class="needs-validation">
        <div class="row mb-6">
          <div class="col-sm-6">
            <label for="auditor" class="form-label">{"Auditor"}</label>
            <input type="text" name="auditor" id="auditor" class="form-control" />
          </div>
          <div class="col-sm-6">
            <label for="resp" class="form-label">{"Responsible"}</label>
            <input type="text" name="resp" id="resp" class="form-control" />
          </div>
        </div>
        <div class="col-12">
          <label for="assess_score" class="form-label">{"Score"}</label>
          <input type="number" min="0.0" max="10.0" step="0.1" name="assess_score" id="assess_score" class="form-control"/>
        </div>
        <div class="col-12">
          <label for="status" class="form-label">{"Status"}</label>
          <select name="status" id="status" class="form-select">
            <option>{"New"}</option>
            <option>{"In Progress"}</option>
            <option>{"Done"}</option>
          </select>
        </div>
        <div class="col-12 mb-6">
          <label for="assessment_verd" class="form-label">{"Assessment"}</label>
          <select name="assessment_verd" id="assessment_verd" class="form-select">
            <option>{"Not affected"}</option>
            <option>{"Regular Patching"}</option>
            <option>{"Immediate Patching"}</option>
            <option>{"Patched"}</option>
            <option>{"Unclear"}</option>
          </select>
        </div>
        <div class="col-12 mb-3">
          <label for="assess_comment" class="form-label">{"Remarks"}</label>
          <textarea name="assess_comment" id="assess_comment" class="form-control" rows="4"></textarea>
        </div>
        <div class="col-12">
          <button type="submit" class="btn btn-primary">{"Save"}</button>
        </div>
      </form>
    </div>
  }
}