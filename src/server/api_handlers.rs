use crate::persistence::rdbms;
use crate::suma::sumaclient;

pub async fn erratalisthandler(i_kind: String) -> Result<impl::warp::Reply, warp::Rejection> {
    match i_kind.as_str() {
        "affected"   => { Ok(warp::reply::json(&rdbms::get_secadvisories(rdbms::SecAdvisoryKind::Affected).await)) }
        "unaffected" => { Ok(warp::reply::json(&rdbms::get_secadvisories(rdbms::SecAdvisoryKind::Unaffected).await)) }
        _            => { Ok(warp::reply::json(&rdbms::get_errataext().await)) }
    }
}

pub async fn errata_details_handler(i_id: i32) -> Result<impl::warp::Reply, warp::Rejection> {
    Ok(warp::reply::json(&rdbms::get_errata(i_id).await))
}

pub async fn updator_handler() -> Result<impl::warp::Reply, warp::Rejection> {
    match sumaclient::run_api().await {
        Ok(_) => Ok("loaded"),
        Err(_) => Err(warp::reject()),
    }
}