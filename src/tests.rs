#[cfg(test)]
use cve_audit_types::*;
use std::collections::BTreeMap;
use crate::persistence::{keyval, rdbms};

#[test]
fn kv_demo_data() {
    // add some code to add demo data
    let mut errata:Vec<Errata> = Vec::new();
    // first some errata
    let mut nr = 1;
    while nr < 10 {
        let e = Errata{
            id: nr 
           ,date: format!("{}-01-2022", nr)
           ,update_date: format!("{}-01-2022", nr).to_owned()
           ,advisory_synopsis: String::from("This is a synopsis which is a longer text")
           ,advisory_type: String::from("Security")
           ,advisory_name: format!("advisory-{}", nr).to_owned(),
        };
        errata.push(e);
        nr += 1;
    }
    // some CVEs
    let mut cves: BTreeMap<String, CVE> = BTreeMap::new();
    let mut nr = 100;
    while nr < 110 {
        let c = CVE {
            cve_id: format!("CVE-2022-{}", nr).to_owned()
           ,suse_errata_list: errata.clone(),
        };
        cves.insert(c.cve_id.clone(), c);
        nr += 1;
    }
    
    let res = keyval::batch_insert("NEW", cves, None);
    assert_eq!(res, std::result::Result::Ok(()));
}

#[test]
fn sql_demo_data() {
    let _ok = rdbms::setup();
    // add some code to add demo data
    let mut errata:Vec<Errata> = Vec::new();
    // first some errata
    let mut nr = 1;
    while nr < 10 {
        let e = Errata{
            id: nr 
           ,date: format!("{}-01-2022", nr)
           ,update_date: format!("{}-01-2022", nr).to_owned()
           ,advisory_synopsis: String::from("This is a synopsis which is a longer text")
           ,advisory_type: String::from("Security")
           ,advisory_name: format!("advisory-{}", nr).to_owned(),
        };
        errata.push(e.to_owned());
        let ok = rdbms::store_errata(e);
        assert_eq!(ok, std::result::Result::Ok(()));
        nr += 1;
    }
    
    // CVES
    let mut cves: Vec<String> = Vec::new();
    let mut nr = 100;
    while nr < 105 {
        cves.push(format!("CVE-2022-{}", nr).to_owned());
        nr += 1;
    }

    for e in errata.iter() {
        let mut ee = ErrataExtended::from(e.to_owned());
        ee.cves = cves.clone();
        let ok = rdbms::store_cve(&ee);
        assert_eq!(ok, std::result::Result::Ok(()));
    }

}