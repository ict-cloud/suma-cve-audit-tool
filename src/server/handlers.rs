use warp::{http::header::HeaderValue, path::Tail, path::Peek, reply::Response, };
use cve_audit_types::*;
use crate::server::routes::Asset;

pub async fn serve_index() -> Result<impl warp::Reply, warp::Rejection> {
    serve_impl("static/index.html")
}

pub async fn serve_idx(_peek: Peek) -> Result<impl warp::Reply, warp::Rejection> {
    serve_impl("static/index.html")
}
 
pub async fn serve(path: Tail) -> Result<impl warp::Reply, warp::Rejection> {
    serve_impl(&("static/".to_owned() + path.as_str()))
}
 
fn serve_impl(path: &str) -> Result<impl warp::Reply, warp::Rejection> {
    let asset = Asset::get(path).ok_or_else(warp::reject::not_found)?;
    let mime = mime_guess::from_path(path).first_or_octet_stream();
 
    //let mut res = Response::new(asset.into());
    let mut res = Response::new(asset.data.into());
 
    res.headers_mut().insert(
        "content-type",
        HeaderValue::from_str(mime.as_ref()).unwrap(),
    );
    Ok(res)
}
 
pub async fn health_handler() -> Result<impl warp::Reply, warp::Rejection> {
    Ok("OK")
}