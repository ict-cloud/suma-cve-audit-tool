use chrono::{prelude::*, Duration};

pub enum RelativeWeeks {
    All,
    ThisWeek,
    LastWeek,
}

impl RelativeWeeks{

    // implement an Enum to Date function
    // use the naive::NaiveWeek function first_day
    // logic is then simple
    // if this week it is now().naiveweek.first_day()
    // if it is last week it is now() (minus) 7 days .naiveweeke.first_day();
    // all does not restrict at all and sends the unix starttime
    fn to_date(&self) -> chrono::naive::NaiveDate {
        let curr_date = Utc::now();
        match *self {
            Self::ThisWeek => curr_date.date_naive().week(Weekday::Mon).first_day(),
            Self::LastWeek => curr_date.date_naive().checked_sub_signed(Duration::days(7)).expect("Valid week").week(Weekday::Mon).first_day(),
            Self::All => chrono::naive::NaiveDate::from_ymd(1970, 1, 1),
        }
    }
}