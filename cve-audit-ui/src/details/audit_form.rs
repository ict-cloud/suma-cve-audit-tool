use web_sys::*;
use yew::prelude::*;
use cve_audit_types::*;
use wasm_bindgen_futures::spawn_local;
use std::ops::Deref;
use wasm_bindgen::JsCast;
use web_sys::FocusEvent;
use web_sys::HtmlInputElement;
use web_sys::InputEvent;

async fn post_formdata(data: ErrataAuditData) -> Result<(), String> {
  let resp = reqwasm::http::Request::post("http://localhost:8081/api/audit/submit/")
              .header("Content-Type", "application/json")
              .body(
                serde_json::to_string(&data)
                .unwrap(),
              )
              .send()
              .await;
  match resp {
    Ok(_) => Ok(()),
    Err(_) => Err(String::from("Bad request")),
  }
}

// see https://discord.com/channels/701068342760570933/703449306497024049/926381991983743037

#[function_component(AuditForm)]
pub fn audit_form() -> Html {

//  let state = use_state( ||FormData::new());
//   let onsubmit = {
//     Callback::from(move |e: FocusEvent| {
//     e.prevent_default();
//     let state = state.clone();
//     let form: HtmlFormElement = e.target_unchecked_into();
//     let form_data = FormData::new_with_form(&form);
//     state.set(form_data.clone());
//     let form_data = form_data.unwrap();
//     log::info!("form_data {:?}", form_data.get_all("auditor"));
//     let body = ErrataAuditData {
//           id: 42,//form_data.get("id").as_i32(),
//           audit_date: String::from("").to_owned(),
//           auditor: form_data.get("auditor").as_string().expect("auditor fiel expected string").to_owned(),
//           resp: form_data.get("resp").as_string().expect("resp field expected string").to_owned(),
//           status: AuditStatus::New,
//           assessment_verdict: AuditAssessment::AffectedRegularPatching,
//           assessed_score: 42.0, //form_data.get("assess_score").as_f64().unwrap(),
//           assessment_comment: form_data.get("assess_comment").as_string().expect("assess_comment expected string").to_owned(),
//     };

let onsubmit = {
  
  Callback::from(move |e: FocusEvent| {
    e.prevent_default(); // dont do browser auto post
    let form: HtmlFormElement = e.target_unchecked_into();
    let form_data = FormData::new_with_form(&form).expect("Valid form data");
    // validation of form data?
    // if is_invalid {
    //     return;
    // }
    let body = ErrataAuditData {
      id: 42, //form_data.get("id").into_serde::<u32>().expect("Valid unsigned integer"),
      audit_date: String::from("20220505"),
      auditor: form_data.get("auditor").as_string().expect("auditor fiel expected string").to_owned(),
      resp: form_data.get("resp").as_string().expect("resp field expected string").to_owned(),
      status: AuditStatus::New,
      assessment_verdict: AuditAssessment::AffectedRegularPatching,
      assessed_score: form_data.get("assess_score").into_serde::<f32>().unwrap_or_default(),
      assessment_comment: form_data.get("assess_comment").as_string().expect("assess_comment expected string").to_owned(),
    };

    // now do the submitting here
    // fetching is asynchronous so we spawn a wasm_bindgen thread https://yew.rs/docs/tutorial#fetching-data-using-external-rest-api
    spawn_local(async move {
        // here you should do the fetch, with something like reqwasm or just fetch from web_sys
        let _resp = reqwasm::http::Request::post("/api/audit/submit")
            .header("Content-Type", "application/json")
            .body(serde_json::to_string(&body).unwrap())
            .send()
            .await
            .unwrap();
        // do stuff with the response
    });
  })
};

  html!{
    <div class="col-md-7 col-lg-8">
      <form method="post" onsubmit={onsubmit} class="needs-validation">
        <input type="text" name="id" id="id" hidden=true/>
        <div class="row mb-6">
          <div class="col-sm-6">
            <label for="auditor" class="form-label">{"Auditor"}</label>
            <input type="text" name="auditor" id="auditor" class="form-control" />
          </div>
          <div class="col-sm-6">
            <label for="resp" class="form-label">{"Responsible"}</label>
            <input type="text" name="resp" id="resp" class="form-control" />
          </div>
        </div>
        <div class="col-12">
          <label for="assess_score" class="form-label">{"Score"}</label>
          <input type="text" name="assess_score" id="assess_score" class="form-control"/>
        </div>
        <div class="col-12">
          <label for="status" class="form-label">{"Status"}</label>
          <select name="status" id="status" class="form-select">
            <option>{"New"}</option>
            <option>{"In Progress"}</option>
            <option>{"Done"}</option>
          </select>
        </div>
        <div class="col-12 mb-6">
          <label for="assessment_verd" class="form-label">{"Assessment"}</label>
          <select name="assessment_verd" id="assessment_verd" class="form-select">
            <option>{"Not affected"}</option>
            <option>{"Regular Patching"}</option>
            <option>{"Immediate Patching"}</option>
            <option>{"Patched"}</option>
            <option>{"Unclear"}</option>
          </select>
        </div>
        <div class="col-12 mb-3">
          <label for="assess_comment" class="form-label">{"Remarks"}</label>
          <textarea name="assess_comment" id="assess_comment" class="form-control" rows="4"></textarea>
        </div>
        <div class="col-12">
          <button type="submit" class="btn btn-primary">{"Save"}</button>
        </div>
      </form>
    </div>
  }
}