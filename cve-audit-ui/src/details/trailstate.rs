use yew::prelude::*;
use yew_hooks::prelude::*;
use std::rc::Rc;

/// reducer's Action
enum TrailAction {
    Load(u32),
}

/// reducer's State
struct TrailState {
    audit_trail_list: Vec<cve_audit_types::ErrataAuditData>,
}

impl Default for TrailState {
    fn default() -> Self {
        Self { audit_trail_list: vec![] }
    }
}

// needs to be combined with use_effect
// https://github.com/jetli/rust-yew-realworld-example-app/blob/master/crates/conduit-wasm/src/components/article_list.rs

impl Reducible for TrailState {
    /// Reducer Action Type
    type Action = TrailAction;

    /// Reducer Function
    fn reduce(self: Rc<Self>, action: Self::Action) -> Rc<Self> {
        let new_list: yew_hooks::UseAsyncHandle<std::vec::Vec<cve_audit_types::ErrataAuditData>, String> = {
            use_async( async move {
                match action {
                    TrailAction::Load(cve_id) => {
                        let l_url = format!("http://localhost:8081/api/errata/{}/audittrail", cve_id);
                        let trail: Result<Vec<cve_audit_types::ErrataAuditData>, String> = reqwasm::http::Request::get(l_url.as_str())
                                .send()
                                .await
                                .unwrap()
                                .json()
                                .await
                                .unwrap();
                        match trail {
                            Ok(trail) => Ok(trail),
                            Err(e)    => Err(String::from("Could not fetch audit trail"))
                        }
                    },
                }
            })
        };         
        {
            let new_list = new_list.clone();
            use_effect_with_deps(
                move |_| {
                    new_list.run();
                    || ()
                }, ()
            );
        };

        Self { audit_trail_list: new_list.data.as_ref().unwrap().to_owned() }.into()
        
    }
}
