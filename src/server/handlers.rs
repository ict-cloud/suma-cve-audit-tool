use crate::server::routes::Asset;
use warp::{http::header::HeaderValue, path::Tail, reply::Response};

pub async fn serve_index() -> Result<impl warp::Reply, warp::Rejection> {
    serve_impl("static/index.html")
}

// generic function to handle all paths where we do not want to process the input parameters
pub async fn serve_idx<T>(_i: T) -> Result<impl warp::Reply, warp::Rejection> {
    serve_index().await
}

pub async fn serve(path: Tail) -> Result<impl warp::Reply, warp::Rejection> {
    serve_impl(&("static/".to_owned() + path.as_str()))
}

fn serve_impl(path: &str) -> Result<impl warp::Reply, warp::Rejection> {
    let asset = Asset::get(path).ok_or_else(warp::reject::not_found)?;
    let mime = mime_guess::from_path(path).first_or_octet_stream();

    let mut res = Response::new(asset.data.into());

    res.headers_mut().insert(
        "content-type",
        HeaderValue::from_str(mime.as_ref()).unwrap(),
    );
    Ok(res)
}

pub async fn health_handler() -> Result<impl warp::Reply, warp::Rejection> {
    Ok("OK")
}
