use warp::Filter;

use crate::server::reject;
use crate::server::routes;

pub type Reslt<T> = std::result::Result<T, Box<dyn std::error::Error + Send + Sync>>;

//#[tokio::main]
pub async fn serv(listen: &str) -> Reslt<()> {
    let addr: std::net::SocketAddr = listen.parse().expect("Unable to parse socket address");
    // define all routes
    let rtes = routes::stat_routes().or(routes::api_routes());
    Ok(warp::serve(rtes.recover(reject::handle_rejection)).run(addr).await)
    // TODO: the index..._bg.wasm file neets to be sent with the proper header type, otherwise chrome will fail (Edge will work though)
    // see https://stackoverflow.com/questions/53900736/invalid-or-unexpected-token-in-webassembly
}
