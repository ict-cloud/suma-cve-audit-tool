use rusqlite::{Connection, Result, params};
//use sqlx::Connection;
use cve_audit_types::*;


// Constants
const DB_NAME: &str = "./db/suse_errata.sqlite";
//const DB_NAME: &str = "sqlite:./db/suse_errata.sqlite";

/*  SETUP of Relational database
* suse_errata
*    data from suse errata
* 
*  CVE
*    data for CVE (id, name, score)
*
*  Audit Evaluation
*    Data of the evaluation
*    date, person, result, 
*
*  errata_cve
*    Relations from errata to cve
*  
*  errata_audit
*    Relations from errata to audits
*
*  cve_systems
*    systems affected by cve
*/ 
fn open_db() -> Connection {
    Connection::open(DB_NAME).unwrap()
}

pub fn setup() -> Result<()> {
    //let conn = SqliteConnection::connect(DB_NAME);
    //let conn = SqliteConnection::establish(DB_NAME);
    let conn = open_db();

    conn.execute(
        "create table if not exists errata (
             id integer primary key,
             date text not null,
             update_date text not null,
             advisory_type text,
             advisory_name text not null unique,
             advisory_synopsis text
         )",
        [],
    )?;
    conn.execute(
        "create table if not exists cve (
             id text primary key,
             score float,
         )",
        [],
    )?;
    conn.execute(
        "create table if not exists errata_cve (
             id integer primary key,
             cve_id text not null references cve(id),
             errata_id integer not null references errata(id)
         )",
        [],
    )?;
    conn.execute(
        "create table if not exists cve_systems (
             id integer primary key,
             cve_id text not null references cve(id),
             affected_systems_cnt integer,
             last_checked datetime default current_timestamp
         )",
        [],
    )?;

    Ok(())
}

pub fn store_errata(i_errata: cve_audit_types::Errata) -> Result<()> {
    let conn = open_db();
    let stmt = r#"INSERT INTO errata VALUES (?1, ?2, ?3, ?3, ?4, ?5, ?6)"#;

    conn.execute(stmt, 
        params![i_errata.id,
                i_errata.date, 
                i_errata.update_date, 
                i_errata.advisory_type, 
                i_errata.advisory_name, 
                i_errata.advisory_synopsis,]
            )?;

    Ok(())
}

pub fn store_cve(i_errata_ext: &cve_audit_types::ErrataExtended) -> Result<()> {
    let conn = open_db();
    let stmt = r#"INSERT INTO cve (id) VALUES (?)"#;
    let stmt_rel = r#"INSERT INTO errata_cve (cve_id, errata_id) VALUES (?1, ?2)"#;

    for c in i_errata_ext.cves.iter() {
        conn.execute(stmt, params![c])?;
        conn.execute(stmt_rel, params![c, i_errata_ext.id])?;
    }

    Ok(())
}

