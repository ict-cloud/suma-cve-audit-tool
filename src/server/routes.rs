use rust_embed::RustEmbed;
use warp::{ Filter, Reply, filters::BoxedFilter};
use crate::server::handlers::*;
use crate::server::api_handlers::*;
use std::convert::Infallible;
use crate::persistence::keyval;

#[derive(RustEmbed)]
#[folder = "static"]
#[prefix = "static/"]
pub struct Asset;


// filter helper
// fn with_db() -> impl warp::Filter<Extract = (sled::Db,), Error = Infallible> + Clone {
//     warp::any().map(move || None)
// }

pub fn stat_routes() -> BoxedFilter<(impl Reply,)> {

    let cors = warp::cors()
    .allow_any_origin()
    .allow_headers(vec!["User-Agent", "Sec-Fetch-Mode", "Referer", "Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", "Content-Type"])
    .allow_methods(vec!["POST", "GET"]);

    // build the pages and define an index
    //let index_html = warp::get().and(warp::path::end()).and_then(handlers::serve_index);
    let index_html = warp::get().and(warp::path::end()).and_then(serve_index).boxed();
    // serve all static assets
    let stat = warp::path("static").and(warp::path::tail()).and_then(serve).boxed();
    // urls needed from yew app
    let health_route = warp::path!("health").and_then(health_handler).boxed();

    index_html
    .or(stat)
    .or(health_route)
    .with(cors)
    .boxed()
}

// filter helper
fn with_db() -> impl Filter<Extract = (sled::Db,), Error = Infallible> + Clone {
    warp::any().map(move || keyval::open_db(None))
}

pub fn api_routes() -> BoxedFilter<(impl Reply,)> {

    let cors = warp::cors()
    .allow_any_origin()
    .allow_headers(vec!["User-Agent", "Sec-Fetch-Mode", "Referer", "Origin", "Access-Control-Request-Method", "Access-Control-Request-Headers", "Content-Type"])
    .allow_methods(vec!["POST", "GET"]);

    // build the pages and define an index
    let list_cves = warp::path!("api" / "getcves").and(warp::path::end()).and(with_db()).and_then(listhandler).with(&cors).boxed();
    let list_errata = warp::path!("api" / "geterrata").and(warp::path::end()).and_then(erratalisthandler).with(&cors).boxed();

    list_cves
    .or(list_errata)
    .with(cors)
    .boxed()
}