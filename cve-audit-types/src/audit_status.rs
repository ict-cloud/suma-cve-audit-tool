use serde_derive::{Deserialize, Serialize};
use std::convert::Infallible;
use std::fmt;
use std::str::FromStr;

#[derive(Debug, Clone, Serialize, Deserialize, PartialEq)]
pub enum AuditStatus {
    New,
    InProgress,
    Done,
}

impl fmt::Display for AuditStatus {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            AuditStatus::InProgress => write!(f, "In Progress"),
            AuditStatus::Done => write!(f, "Done"),
            _ => write!(f, "New"),
        }
    }
}

// needed to be able to catch input from forms or json
impl FromStr for AuditStatus {
    type Err = Infallible;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let audit_status = match s {
            "In Progress" => AuditStatus::InProgress,
            "Done" => AuditStatus::Done,
            &_ => AuditStatus::New,
        };

        Ok(audit_status)
    }
}
