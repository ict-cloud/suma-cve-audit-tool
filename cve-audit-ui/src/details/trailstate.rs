use yew::prelude::*;
use yew_hooks::prelude::*;
use std::rc::Rc;

/// reducer's Action
pub enum TrailAction {
    Load(Vec<cve_audit_types::ErrataAuditData>),
}

/// reducer's State
#[derive(PartialEq)]
pub struct TrailState {
    pub audit_trail_list: Vec<cve_audit_types::ErrataAuditData>,
}

impl Default for TrailState {
    fn default() -> Self {
        Self { audit_trail_list: vec![] }
    }
}

// needs to be combined with use_effect
// https://github.com/jetli/rust-yew-realworld-example-app/blob/master/crates/conduit-wasm/src/components/article_list.rs

impl Reducible for TrailState {
    /// Reducer Action Type
    type Action = TrailAction;

    /// Reducer Function
    fn reduce(self: Rc<Self>, action: Self::Action) -> Rc<Self> {
        let new_list: Vec<cve_audit_types::ErrataAuditData> = {
            //let trail: Vec<cve_audit_types::ErrataAuditData> = Vec::new();
                match action {
                    TrailAction::Load(new_trail_list) => {
                        new_trail_list
                },
            }
        };         

        Self { audit_trail_list: new_list.to_owned() }.into()
        
    }
}
