use yew::prelude::*;
use yew::{ContextProvider};
use yew_router::prelude::*;
use crate::route;

pub enum Msg {
}

#[derive(Clone, Debug, PartialEq)]
pub struct CveAuditTool {}

impl Component for CveAuditTool {
    type Message = Msg;
    type Properties = ();

    fn create(_ctx: &Context<Self>) -> Self {
        Self {}
    }

    fn update(&mut self, _ctx: &Context<Self>, _msg: Self::Message) -> bool {
        true
    }

    fn changed(&mut self, _ctx: &Context<Self>) -> bool {
        true
    }

    fn view(&self, ctx: &Context<Self>) -> Html {
        html! {
        <BrowserRouter>
        { self.render_header() }
        <div class="container-fluid">
          <div class="row">
            <nav id="sidebarMenu" class="col-md-3 col-lg-2 d-md-block bg-light sidebar collapse">
            <div class="position-sticky pt-3">
                <ul class="nav flex-column">
                <li class="nav-item">
                    <Link <route::AppRoute> to={route::AppRoute::Home}>{ "Affected CVEs" }</Link<route::AppRoute>>
                </li>
                <li class="nav-item">
                    <Link <route::AppRoute> to={route::AppRoute::NotAffected}>{ "Not affected CVEs" }</Link<route::AppRoute>>
                </li>
                <li class="nav-item">
                    <Link <route::AppRoute> to={route::AppRoute::OtherErrata}>{ "Other Errata" }</Link<route::AppRoute>>
                </li>
                </ul>
            </div>
            </nav>

            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                { self.render_headlinks() }
                <Switch<route::AppRoute> render={Switch::render(route::switch) } />
            </main>
          </div>
        </div>
        </BrowserRouter>
        }
    }
}

impl CveAuditTool {

    fn render_header(&self) -> Html {
        html! {
            <header class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow">
            <a class="navbar-brand col-md-3 col-lg-2 me-0 px-3" href="/">{"SUSE CVE Audit Tool"}</a>
            <button class="navbar-toggler position-absolute d-md-none collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#sidebarMenu" aria-controls="sidebarMenu" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            </header>
        }
    }

    fn render_headlinks(&self) -> Html {
        html! {
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">{"Dashboard"}</h1>
                <div class="btn-toolbar mb-2 mb-md-0">
                <div class="btn-group me-2">
                    <button type="button" class="btn btn-sm btn-outline-secondary">{"Share"}</button>
                    <button type="button" class="btn btn-sm btn-outline-secondary">{"Export"}</button>
                </div>
                <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle">
                    <span data-feather="calendar"></span>
                    {"This week"}
                </button>
                </div>
            </div>
        }
    }

    // fn render_navlink(&self, i_to: route::AppRoute, i_title: &str, i_ctx_url: &str) -> Html {
    //     //ctx.props().url = i_ctx_url.to_owned();
    //     //let apiurl = crate::ErrataAPIProps{url: i_ctx_url.to_owned(), };
    //     yew::props!(crate::ErrataAPIProps{url: i_ctx_url.to_owned(), });
    //     html! {
    //             <Link <route::AppRoute> to={i_to}>{ i_title }</Link<route::AppRoute>>
    //     }
    // }

}