use sqlx::prelude::*;
use sqlx::Result;
use crate::persistence::rdbms::*;

pub async fn setup() -> Result<()> {
    // create db path if it not exists
    if !std::path::Path::new(db_path().as_str()).exists() {
        match std::fs::create_dir(db_path().as_str()) {
            Err(e) => log::error!("Unable to create directory: {}", e),
            Ok(()) => log::info!("Directory created"),
        };
    }

    let setup_stmt = r#"
        begin;
            CREATE TABLE IF NOT EXISTS errata (
                suse_id INTEGER UNIQUE,
                date REAL NOT NULL,
                update_date REAL NOT NULL,
                advisory_type TEXT,
                advisory_name TEXT NOT NULL UNIQUE,
                advisory_synopsis TEXT
            );
            CREATE TABLE IF NOT EXISTS cve (
                id TEXT PRIMARY KEY,
                score REAL
            );
            CREATE TABLE IF NOT EXISTS errata_cve (
                id INTEGER PRIMARY KEY,
                cve_id TEXT NOT NULL REFERENCES cve(id),
                errata_id INTEGER NOT NULL REFERENCES ERRATA(suse_id)
            );
            CREATE TABLE IF NOT EXISTS cve_systems (
                id INTEGER PRIMARY KEY,
                cve_id TEXT NOT NULL REFERENCES cve(id),
                affected_systems_cnt INTEGER,
                last_checked_date REAL
            );
            CREATE TABLE IF NOT EXISTS audit_data (
                id integer primary key,
                errata_id INTEGER NOT NULL REFERENCES ERRATA(suse_id),
                audit_date REAL NOT NULL,
                auditor TEXT,
                responsible TEXT,
                status TEXT NOT NULL,
                assessment TEXT NOT NULL,
                assess_score REAL,
                assessment_comment TEXT
            );
            CREATE TABLE IF NOT EXISTS audit_trail (
                id integer primary key,
                new_id INTEGER NOT NULL REFERENCES audit_data(id),
                errata_id INTEGER NOT NULL REFERENCES ERRATA(suse_id),
                audit_date REAL NOT NULL,
                auditor TEXT,
                responsible TEXT,
                status TEXT NOT NULL,
                assessment TEXT NOT NULL,
                assess_score REAL,
                assessment_comment TEXT
            );
        COMMIT;
    "#;
    
    match sqlx::query(setup_stmt).execute(&open_pool()).await {
        Ok(_)   => Ok(()),
        Err(_) => Err(sqlx::Error::Protocol(String::from("Invalid Query"))),
    }
}