#![recursion_limit = "256"]
use wasm_bindgen::prelude::*;
use yew::html;
use yew::prelude::*;
use yew_router::prelude::*;

use cve_audit_types::*;

enum Msg {
}

struct JobCrawlApp {}

#[derive(Routable, PartialEq, Clone, Debug)]
pub enum AppRoute {
    #[at("/create-job-ad")]
    CreateJobAd,
    #[at("/")]
    Home,
    #[at("/be")]
    Be,
    #[not_found]
    #[at("/404")]
    NotFound,
}

impl Component for JobCrawlApp {
    type Message = Msg;
    type Properties = ();

    fn create(_ctx: &Context<Self>) -> Self {
        Self {}
    }

    fn update(&mut self, _ctx: &Context<Self>, _msg: Self::Message) -> bool {
        true
    }

    fn changed(&mut self, _ctx: &Context<Self>) -> bool {
        true
    }

    fn view(&self, _ctx: &Context<Self>) -> Html {
        html! {
        <>
        { self.render_header() }
        <div class="container-fluid">
          <div class="row">
            <nav id="sidebarMenu" class="col-md-3 col-lg-2 d-md-block bg-light sidebar collapse">
            <div class="position-sticky pt-3">
                <ul class="nav flex-column">
                <li class="nav-item">
                    <Link <AppRoute> to={AppRoute::Home}>{ "Home" }</Link<AppRoute>>
                    <br/>
                    <Link <AppRoute> to={AppRoute::Be}>{"Jobs BE"}</Link<AppRoute>>
                </li>
                </ul>
            </div>
            </nav>

            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                { self.render_headlinks() }
                <Switch<AppRoute> render={Switch::render(switch)} />
            </main>
          </div>
        </div>
        < />
        }
    }
}

fn switch(routes: &AppRoute) -> Html {
    match routes.clone() {
        AppRoute::Home => {
            html! { 
                <div>
                    <ul>
                    <li>
                    {"List goes here and here..."}
                    </li>
                    </ul>
                    <br />
                </div>
             }
        }
        AppRoute::NotFound => {
            html! { <div>{"Invalid Page"}</div> }
        }
        _ => html! { <div>{"Nothing to see here"}</div> }

    }
}

#[wasm_bindgen(start)]
pub fn run() {
    yew::start_app::<JobCrawlApp>();
}

impl JobCrawlApp {

    fn render_header(&self) -> Html {
        html! {
            <header class="navbar navbar-dark sticky-top bg-dark flex-md-nowrap p-0 shadow">
            <a class="navbar-brand col-md-3 col-lg-2 me-0 px-3" href="/">{"Job Crawl App"}</a>
            <button class="navbar-toggler position-absolute d-md-none collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#sidebarMenu" aria-controls="sidebarMenu" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            </header>
        }
    }

    fn render_headlinks(&self) -> Html {
        html! {
            <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">{"Dashboard"}</h1>
                <div class="btn-toolbar mb-2 mb-md-0">
                <div class="btn-group me-2">
                    <button type="button" class="btn btn-sm btn-outline-secondary">{"Share"}</button>
                    <button type="button" class="btn btn-sm btn-outline-secondary">{"Export"}</button>
                </div>
                <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle">
                    <span data-feather="calendar"></span>
                    {"This week"}
                </button>
                </div>
            </div>
        }
    }

}